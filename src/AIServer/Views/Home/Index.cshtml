@{
    ViewData["Title"] = "Home Page";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="css/chat.css">

<div style="max-width: 1800px; margin: 0 auto;">
    <h1>Local GPT</h1>
</div>
<div class="container">
    <div id="chat-display"></div>
    <div id="input-container">
        <input type="text" id="message-input" placeholder="Type your message..." />
        <button id="send-button" onclick="sendMessage()">Send</button>
    </div>
</div>

<script>
    const chatDisplay = document.getElementById('chat-display');
    const messageInput = document.getElementById('message-input');

    // Handle Enter key press
    messageInput.addEventListener('keydown', (event) => {
        if (event.key === 'Enter' && !event.shiftKey) {
            sendMessage();
        }
    });

    async function sendMessage() {
        let message = messageInput.value.trim();

        if (!message) 
            return;

        disableChatInput();
        let reponseElement = addMessage("User", message);
        let responseReader = await sendMessageToServer(message);
        reponseElement = addMessage("Assistant", "");
        await streamToElement(responseReader, reponseElement);
        enableChatInput();
        clearChatInput();
    }

    async function sendMessageToServer(message) {
        let response = await fetch('api/chat/ollama/gpt-oss:20b/123', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(message)
        });

        if (!response.ok)
            throw new Error('Network response was not ok');

        return response.body.getReader();
    }

    function addMessage(user, message) {
        var time = new Date().toTimeString().split(' ')[0];

        var msg = document.createElement("div");
        msg.classList.add("message");
        msg.classList.add(user == "Assistant" ? "Assistant" : "user");

        if(user == "Assistant") {
            msg.innerHTML =`
                
                <div class="content">
                    <label>${user}</label>
                    <div class="thought">Thought:\n</div>
                    <div class="reply"></div>
                </div>`;
        }
        else {
            msg.innerHTML =`
                <div class="content">
                    <label>${user}</label>
                    <div class="reply noThought">${message}</div>
                </div>`;
        }
        
        chatDisplay.appendChild(msg);
        return msg;
    }

    async function streamToElement(reader, outputElement) {

        const decoder = new TextDecoder("utf-8");
        let { value, done } = await reader.read();
        let buffer = '';

        while (!done) {
            buffer += decoder.decode(value, { stream: true });
            let lines = buffer.split('\n');
            buffer = lines.pop();

            for (let line of lines) {
                appendLine(line, outputElement);
            }

            ({ value, done } = await reader.read());
        }

        if (buffer) {
            appendLine(buffer, outputElement);
        }
    }

    function appendLine(line, element) {
        var token = JSON.parse(line);

        if(token.Thought)
            element.querySelector('.thought').textContent += token.Thought;

        if(token.Content.length > 0)
            element.querySelector('.reply').textContent += token.Content;

        if(token.ToolCalls && token.ToolCalls.length > 0) {
            for(let toolName in token.ToolCalls) {
                element.querySelector('.thought').textContent += "\nCalling tool: " + toolName;
            }
        }

        chatDisplay.scrollTop = chatDisplay.scrollHeight;
    }

    function clearChatInput() {
        messageInput.value = '';
    }

    function disableChatInput() {
        messageInput.disabled = true;
    }

    function enableChatInput() {
        messageInput.disabled = false;
    }
</script>